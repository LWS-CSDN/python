"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
##################################################################################################################################################
########################################项目的总配置文件 里面包含数据库 web应用 时间等各种配置#########################################################
###################################################################################################################################################
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
###################################################################################################
#该配置是django的安全配置，防止攻击用的，该值是startProject时用系统的某个算法产生的.
###################################################################################################
SECRET_KEY = 'uv3p0jdkl-jdev3@nbyymg6f849w)b$8c)gjr(9u3q_m=*_0g-'

# SECURITY WARNING: don't run with debug turned on in production!
################## ##############################################################
#DEBUG：默认值：False 一个开关，用于是否打开调试模式
#其值为True或者False. 在开发过程中，需要设置成True, 在测试功能时，
#Django能够显示详细的报错信息一这是 “开发模式”。如果将项目部署到真正要对外发布的服务器上，
#我们称之为“生产环境”，必须将其值修改为False,从而避免暴露项目的内部信息。
#################################################################################
DEBUG = True


################################################################################################
# #在DEBUG为True时，其值可以为空。当部署到生产环境中时， 要把主域名填写到这里，才能通过城名访问到本网站。例如['127.0.0.1']
################################################################################################
ALLOWED_HOSTS = []


# Application definition
####################################################################################################################################################
#这个是APP列表，创建的APP要添加在这里面
#这是一一个非常重要的配置项，所有的应用只有写到这里才能生效。默认情况下，已经有了些应用，
#比如django contrib admin就是针对项目后台管理的应用。现在需要把刚刚建立的应用Blog配置到这里。
#下面的INSTALLED APPS列表中，1是新增加的，就是所建立的应用名称，其他各项是Django默认具有的应用。
####################################################################################################################################################
INSTALLED_APPS = [
    'nblog3.apps.Nblog3Config',

    #django.contrib.admin —— 管理站点。
    'django.contrib.admin',

    #django.contrib.auth —— 认证系统。
    'django.contrib.auth',

    #django.contrib.contenttypes —— 用于内容类型的框架。
    'django.contrib.contenttypes',

    #django.contrib.sessions —— 会话框架，session数据可以在数据库中的django_session表中查看。
    'django.contrib.sessions',

    #django.contrib.messages —— 消息框架。
    'django.contrib.messages',

    #django.contrib.staticfiles —— 管理静态文件的框架。
    'django.contrib.staticfiles',

    'django_cleanup.apps.CleanupConfig',
    'rest_framework',#1
]




#######################################################################################################
#这个是用来配置中间件的，我们自己定义的中间件都要加在这个里面，注意自定义中间件要放在django中间件的下面.
#django的中间件配置，即MIDDLEWARE设置，所谓中间件就是从用户请求到用户请求结束期间所做的操作，
#即用户的请求会次从上到下依次执行MIDDLEWARE中的配置，然后服务器响应用户的时候会再次从下至上依次执行，
#和Java的Filter很相像：
#
#MIDDLEWARE = [
# 'django.middleware.security.SecurityMiddleware',
# 'django.contrib.sessions.middleware.SessionMiddleware',
# 'django.middleware.common.CommonMiddleware',
# 'django.middleware.csrf.CsrfViewMiddleware',
# 'django.contrib.auth.middleware.AuthenticationMiddleware',
# 'django.contrib.messages.middleware.MessageMiddleware',
# 'django.middleware.clickjacking.XFrameOptionsMiddleware',
#]
#一般的django配置如上图，如果需要自己添加中间件配置的，也可自己添加，这里不再多说。
########################################################################################################
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]






######################################################这里设置的是根URL##############################################
ROOT_URLCONF = 'project.urls'

############################################设置模板的路径，根据你的BASE_DIR来进行字符串拼接，如果要拼接多个字符串，要将每个字符串用‘,’隔开。###################################################
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

#######################################################################################################
#配置数据库
#这个是用来配置中间件的，我们自己定义的中间件都要加在这个里面，注意自定义中间件要放在django中间件的下面.
#在这里可以配置数据库。Django 能够支持多种数据库，比如常见的 MySQL、PostgreSQL、 Oracle 等。
#默认配置的是SQLite,因为这个数据库小巧灵活，还是Python标准库所支持的。
#所以，我们就使用这个数据库，便于使用和迁移代码，在实际的工程项目中，在服务器上可能很少用到它。
########################################################################################################
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
###################################################################################################################
###########################################启用密码验证#############################################################
###################################################################################################################
AUTH_PASSWORD_VALIDATORS = [
    {# 检查密码和用户某些属性的相似性
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {# 检查密码的最小长度(默认8)
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {# 检查密码是否出现在常用密码表中
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {# 检查密码是否全为数字
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
#####################################################
#配置语言
#设置项目的语言，一般情况下可以不用修改，如果非用汉语，则设置为
#LAnguage_ CODE = ‘zh-hans’ (注意不是"zh-cn’)。
#####################################################
LANGUAGE_CODE = 'ja'


##############################################
#配置时区
#设置时区，通常使用东八区，设置为“Asia/Shanghai”。
##############################################
TIME_ZONE = 'Asia/Tokyo'


###########################################################
#设置国际化，根据个人需要进行设置：
#国际化：USE_I18N = True
#相同内容被不同时区地区的用户访问时，是否以不同格式内容展示(例如时间，日期，数字)：USE_L10N = True
###########################################################
USE_I18N = True
USE_L10N = True


##################################################################################
#设置保存到数据库时间类型是否为UTC时间，如果不需要请设置为false,默认为true：USE_TZ = True
##################################################################################
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
##########################################################################################################################
#配置一个静态文件，配置方法同模板的配置基本相似
##########################################################################################################################
STATIC_URL = '/static/'


#####################################################################################################
# MEDIA_URL默认值: ” (空的字符串) 处理媒体服务的URL(媒体文件来自 MEDIA_ROOT)
#####################################################################################################
MEDIA_URL = '/media/'



####################################1.2.30 MEDIA_ROOT：默认值: ” (空的字符串) 一个绝对路径, 用于保存媒体文件##############
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if DEBUG:
    INSTALLED_APPS += ['corsheaders']

    ###################################添加中间件
    MIDDLEWARE = ['corsheaders.middleware.CorsMiddleware'] + MIDDLEWARE

    #########################################添加白名单
    CORS_ORIGIN_WHITELIST = (
        'http://127.0.0.1:8080',
        'http://localhost:8080', #凡是出现在白名单中的域名，都可以访问后端接口
    )

    ##指明在跨域访问中，后端是否支持对cookie的操作
    CORS_ALLOW_CREDENTIALS = True  # これを追記


#扩展
#正则配置:
#CORS_ORIGIN_REGEX_WHITELIST =(r'^(https?://)?（\w+\.)?jim\.com $',)
#直接允许所有主机跨域
#CORS_ORIGIN_ALLOW_ALL = True 默认为False
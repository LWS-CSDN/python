1.
不可变数据类型和可变数据类型区别(高频)
不可变数据类型:整型，字符串，元组
可变数据类型:列表，集合，字典
不可变数据类型更改后地址发生改变，可变数据类型更改地址不发生改变

2.
GIL锁(高频)
GIL保证同一时刻只有一个线程执行代码，每个线程在执行过程中都要先获取GIL
GIL只对计算密集型的程序有作用，对IO密集型的程序并没有影响，
因为遇到IO阻塞会自动释放GIL锁
当需要执行计算密集型的程序时，可以选择：
1.换解释器，2.扩展C语言，3.换多进程等方案

怎么解决GIL锁?

3.
深拷贝和浅拷贝(高频)

使用场景

4.装饰器，生成器，迭代器(高频)

5.用一行代码生成[1,4,9,16,25,36,49,64,81,100]
list=[i**2 for i in range(1,11)]

6.python的设计模式

7.列表生成式

8.列表去重

9.闭包(高频)
闭包使用场景
闭包避免了使用全局变量，此外，
闭包允许将函数与其所操作的某些数据（环境）关连起来。
这一点与面向对象编程是非常类似的，在面对象编程中，
对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联

10.python垃圾回收机制

11.is和==区别
is判断内存地址是否相等
==判断值是否相等

12.方法和函数的区别?

13.session和cookie

14.
python退出时，为什么不清除所有分配的内存?

15.yield(高频)

16.二维数组降为一维数组

17.python2和python3的区别

18.讲一下orm

19.
并发的方式有多种:
多进程
多线程
I/O多路复用

20.
讲一下I/O多路复用?
每当来一个客户请求就产生一个进程来服务，
然而进程不可能无限制的产生，因此为了解决大量客户端访问的问题，引入了IO复用技术
也就是说IO复用的“介质”是进程(准确的说复用的是select和poll，
因为进程也是靠调用select和poll来实现的)，
复用一个进程(select和poll)来对多个IO进行服务，
虽然客户端发来的IO是并发的但是IO所需的读写数据多数情况下是没有准备好的
因此就可以利用一个函数(select和poll)来监听IO所需的这些数据的状态，
一旦IO有数据可以进行读写了，进程就来对这样的IO进行服务。

select、poll和epoll的区别和联系
由于select采用轮询方式扫描文件描述符。文件描述符数量越多，性能越差。
pollfd结构包含了要监视的event和发生的evevt，不再使用select传值的方法。更方便

epoll比select/poll的优越之处：
因为后者每次调用时都要传递你所要监控的所有socket给select/poll系统调用，
这意味着需要将用户态的socket列表copy到内核态，
如果以万计的句柄会导致每次都要copy几十几百KB的内存到内核态，
非常低效。而我们调用epoll_wait时就相当于以往调用select/poll
，但是这时却不用传递socket句柄给内核，
因为内核已经在epoll_ctl中拿到了要监控的句柄列表。



一个进程里面可以由很多个线程
python多线程适合io操作密集型的任务
python多线程不适合cpu密集操作型的任务，
主要使用cpu来计算，如大量的数学计算










1、深拷贝和浅拷贝的区别是什么？
深拷贝是将对象本身复制给另一个对象。这意味着如果对对象的副本进行更改时不会影响原对象。
浅拷贝是将对象的引用复制给另一个对象。因此，如果我们在副本中进行更改，则会影响原对象

2.is和==的区别？
is:判断内存地址是否相等
==：判断数值是否相等

3、简述 生成器、迭代器、可迭代对象 以及应用场景？
生成器：在 Python 中，一边循环一边计算的机制，称为生成（generator），通过next()取值，两种表现形式
1、将列表生成式的[]改为()
2、含有yield关键字的函数
应用场景：优化代码，节省内存
带有 yield 的函数在 Python 中被称之为 generator（生成器）

迭代器：是访问集合元素的一种方式。迭代器同时实现了__iter__和__next__方法
可迭代对象：只要实现了__iter__方法的对象就是可迭代对象


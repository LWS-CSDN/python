// 写法一
// export var firstName = 'Michael';
// export var lastName = 'Jackson';
// export var year = 1958;
//*********************************************************************** */
// 写法二(优先考虑这种写法)
var firstName = 'Michael';
var lastName = 'Jackson';
var year = 1958;

export { firstName, lastName, year };
//*********************************************************************** */
//对外输出一个函数multiply
export function multiply(x, y) {
    return x * y;
};
//*********************************************************************** */
//通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。
// function v1() { ... }
// function v2() { ... }

// export {
//   v1 as streamV1,
//   v2 as streamV2,
//   v2 as streamLatestVersion
// };
//*********************************************************************** */
// 需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。
// 报错
// export 1;

// // 报错
// var m = 1;
// export m;
//上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。
//*********************************************************************** */
// 写法一
export var m = 1;

// 写法二
var m = 1;
export {m};

// 写法三
var n = 1;
export {n as m};
//*********************************************************************** */
//同样的，function和class的输出，也必须遵守这样的写法。
// 报错
// function f() {}
// export f;

// // 正确
// export function f() {};

// // 正确
// function f() {}
// export {f};
//另外，export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。
/*********************************************************************** */
// export var foo = 'bar';
// setTimeout(() => foo = 'baz', 500);
// 上面代码输出变量foo，值为bar，500 毫秒之后变成baz。
// 这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新，详见下文《Module 的加载实现》一节。
// 最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以
//。如果处于块级作用域内，就会报错，下一节的import命令也是如此。
//这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。
// function foo() {
//   export default 'bar' // SyntaxError
// }
// foo()
// 上面代码中，export语句放在函数之中，结果报错。
//*********************************************************************** */
//*********************************************************************** */
//*********************************************************************** */
//*********************************************************************** */
//*********************************************************************** */
//*********************************************************************** */
//*********************************************************************** */
//*********************************************************************** */